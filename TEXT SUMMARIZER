*SUMMARIZER*

import nltk
from nltk.tokenize import sent_tokenize
from collections import Counter
import heapq

nltk.download('punkt')

class TextSummarizer:
    def __init__(self, text):
        self.text = text

    def summarize(self, num_sentences=3):
        sentences = sent_tokenize(self.text)

        # Word frequency
        word_frequencies = Counter(word.lower() for sentence in sentences for word in sentence.split())

        # Scoring sentences
        sentence_scores = {sentence: sum(word_frequencies[word.lower()] for word in sentence.split()) for sentence in sentences}

        # Selecting top sentences
        summary_sentences = heapq.nlargest(num_sentences, sentence_scores, key=sentence_scores.get)
        
        return ' '.join(summary_sentences)


*APP*

import sys
import os
import traceback
import nltk

# Add current directory to path
sys.path.append(os.path.dirname(__file__))

# Ensure required NLTK packages are downloaded only once
nltk.download('punkt', quiet=True)

try:
    from summarizer import TextSummarizer  # Ensure the correct import

    def main():
        text = input("Enter the text to summarize:\n>>> ")

        try:
            num_sentences = int(input("Enter the number of summary sentences: "))
        except ValueError:
            print("Invalid input. Using default (2 sentences).")
            num_sentences = 2
        
        summarizer = TextSummarizer(text)
        summary = summarizer.summarize(num_sentences)

        print("\nSummary:\n", summary)

    if __name__ == "__main__":
        main()

except Exception as e:
    print("An error occurred:")
    traceback.print_exc()
    input("\nPress Enter to exit...")

*_INIT_*

